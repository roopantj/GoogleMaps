{"version":3,"sources":["store/user-context.js","components/Map/Map.js","components/FormInput/FormInput.js","components/Card/Card.js","components/Form/Form.js","App.js","reportWebVitals.js","index.js"],"names":["UserContext","React","createContext","userId","username","isUserValid","UserContextProvider","props","useState","setUsername","userid","setUserid","Provider","value","changeUserdetails","name","id","resetUserDetails","children","withScriptjs","withGoogleMap","ctx","useContext","users","setUsers","error","setError","bounds","window","google","maps","LatLngBounds","useEffect","a","fetch","method","response","json","data","map","user","point","LatLng","parseFloat","address","geo","lat","lng","extend","alert","defaultZoom","defaultCenter","position","onClick","FormInput","forwardRef","ref","label","errorMsg","inputProps","inputRef","useRef","useImperativeHandle","focus","current","className","Card","UserForm","title","setTitle","body","setBody","titleValidity","setTitleValid","bodyValidity","setBodyValid","userValidity","setUserValid","validateHandler","inputs","toString","trim","length","onResetHandler","onChangeHandler","event","type","target","submitHandler","preventDefault","console","log","userData","JSON","stringify","headers","ok","onSubmit","placeholder","readOnly","onChange","e","Button","style","margin","width","variant","App","googleMapURL","loadingElement","height","containerElement","mapElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f259ae1d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst UserContext = React.createContext({\r\n    userId: null,\r\n    username: \"\",\r\n    isUserValid: false\r\n});\r\n\r\nexport const UserContextProvider = (props) =>{\r\n    const [username,setUsername] = useState(\"\");\r\n    const [userid,setUserid] = useState(\"\");\r\n       \r\n    const onResetHandler = () =>{\r\n        setUserid(\"\");\r\n        setUsername(\"\");\r\n    }\r\n    const onMarkerClick = (name,id) =>{\r\n        setUserid(id);\r\n        setUsername(name);\r\n    }\r\n    return <UserContext.Provider value={{\r\n        username: username,\r\n        userId: userid,\r\n        changeUserdetails: onMarkerClick,\r\n        resetUserDetails: onResetHandler\r\n        }}>\r\n      {props.children}\r\n    </UserContext.Provider>\r\n}\r\nexport default UserContext;","import { useEffect, useState, useContext } from 'react';\r\nimport '../../App.css';\r\nimport UserContext from '../../store/user-context';\r\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker}   from 'react-google-maps';\r\n\r\nconst Map = () =>{\r\n    const ctx = useContext(UserContext);\r\n    const [users,setUsers] = useState([])\r\n    const [error,setError] = useState()\r\n    let bounds = new window.google.maps.LatLngBounds();\r\n    useEffect(async()=>{\r\n        try{\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users',{\r\n         method:\"GET\"\r\n        });\r\n        const data = await response.json();\r\n        setUsers(data);\r\n        users.map( user => {\r\n            const point = new window.google.maps.LatLng(parseFloat(user.address.geo.lat),parseFloat(user.address.geo.lng) );\r\n            bounds.extend(point);\r\n        })\r\n       }catch(e){\r\n           setError(e)\r\n           window.alert(\"Error \",e)\r\n       }\r\n    },[])\r\n    return(\r\n        users && !error &&\r\n        <GoogleMap \r\n            defaultZoom={2} \r\n            defaultCenter={{ lat: -37.3159, lng:81.1496}}>\r\n            {\r\n                users.map(user=> <Marker \r\n                    key={user.id}  \r\n                    position={{ lat: parseFloat(user.address.geo.lat) ,lng: parseFloat(user.address.geo.lng)}}\r\n                    onClick={()=>\r\n                        ctx.changeUserdetails(user.name,user.id)\r\n                    }></Marker>)\r\n            }\r\n        </GoogleMap>\r\n\r\n    )\r\n}\r\n\r\nexport default withScriptjs(withGoogleMap(Map));","import React,{useRef, useImperativeHandle} from 'react';\r\nimport './FormInput.css';\r\n\r\nconst FormInput = React.forwardRef(({label,error,errorMsg, ...inputProps},ref) =>{\r\n    const inputRef = useRef();\r\n\r\n    useImperativeHandle(ref, ()=> {\r\n        return{\r\n            focus: inputRef.current.focus(),\r\n            value: inputRef.current.value\r\n        }\r\n    })\r\n    return(\r\n        <>\r\n           <div className={`inputControls ${error ? \"invalid\" :\"\"}`}>\r\n               <label>{label}</label>\r\n               <input ref={inputRef} {...inputProps}/><br/>\r\n           </div>\r\n           <div className=\"error\">{error ? errorMsg: \"\"}</div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default FormInput;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className=\"Card\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Card;","import React,{useContext, useState} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport FormInput from '../FormInput/FormInput';\r\nimport UserContext from '../../store/user-context';\r\nimport Card from '../Card/Card';\r\n\r\nconst UserForm = () =>{\r\n\r\n    const ctx = useContext(UserContext);\r\n    const [title,setTitle] = useState(\"\");\r\n    const [body,setBody] = useState(\"\");\r\n    \r\n    const [titleValidity, setTitleValid] = useState(true)\r\n    const [bodyValidity, setBodyValid] = useState(true)\r\n    const [userValidity, setUserValid] = useState(true)\r\n\r\n    const validateHandler = (inputs) =>{\r\n       if(inputs.toString().trim().length>0)\r\n        return true;\r\n       else\r\n        return false; \r\n    }\r\n\r\n    const onResetHandler = () =>{\r\n        setBody(\"\");\r\n        setTitle(\"\");\r\n        ctx.resetUserDetails();\r\n        setTitleValid(true);\r\n        setBodyValid(true);\r\n        setUserValid(true);\r\n    }\r\n\r\n    const onChangeHandler = (event, type) =>{\r\n        if(type===\"title\"){\r\n          setTitleValid(true)\r\n          setTitle(event.target.value)\r\n        }\r\n        if(type===\"body\"){\r\n          setBodyValid(true)\r\n          setBody(event.target.value)\r\n        }    \r\n    }\r\n    const submitHandler = async(event) =>{\r\n         event.preventDefault();\r\n         if(validateHandler(title) && validateHandler(body) && validateHandler(ctx.username))\r\n          {\r\n            console.log(\"All clear\")\r\n            const userData = {\r\n              id:ctx.userId,\r\n              title:title,\r\n              body:body\r\n            }\r\n            try{\r\n              const response = await fetch('https://jsonplaceholder.typicode.com/posts',{\r\n                method:'POST',\r\n                body: JSON.stringify(userData),\r\n                headers: {\r\n                  'Content-Type' : 'application/JSON'\r\n                } \r\n              })  \r\n              if(response.ok)\r\n                window.alert(\"Data added successfully\")\r\n              onResetHandler();\r\n            }\r\n            catch(e){\r\n                window.alert(\"Error in Posting \",e)\r\n            }\r\n          }     \r\n          else {\r\n            if(!validateHandler(title))\r\n            setTitleValid(false)\r\n            if(!validateHandler(body))\r\n            setBodyValid(false);  \r\n            if(!validateHandler(ctx.username))\r\n            setUserValid(false);  \r\n            else\r\n            setUserValid(true);\r\n          }\r\n    }\r\n    return(\r\n      <Card>\r\n          <h3>User Form</h3>\r\n          <form onSubmit={submitHandler} >\r\n            <FormInput \r\n                label=\"Username\" \r\n                type=\"text\"\r\n                value={ctx.username} \r\n                error={ (userValidity || ctx.username)? false : true}\r\n                errorMsg=\"Please select a user!\"\r\n                placeholder=\"Select a user\"\r\n                readOnly/>\r\n            <FormInput \r\n                label=\"Title\" \r\n                type=\"text\" \r\n                value={title}\r\n                onChange={(e)=>onChangeHandler(e,\"title\")}\r\n                error={!titleValidity}\r\n                errorMsg=\"Empty Title!\"\r\n                placeholder=\"Enter title\"/>\r\n            <FormInput \r\n                label=\"Body\" \r\n                type=\"text\" \r\n                value={body}\r\n                onChange={(e)=>onChangeHandler(e,\"body\")}\r\n                error={!bodyValidity}\r\n                errorMsg=\"Empty Body!\"\r\n                placeholder=\"Enter body\"/>\r\n            <Button type=\"submit\" style={{margin:\"1rem 0\",width:\"100%\"}}>Post</Button>\r\n            <Button variant=\"warning\" onClick={onResetHandler} style={{margin:\"1rem 0\",width:\"100%\"}}>Reset</Button>\r\n          </form>  \r\n       </Card>\r\n            \r\n    )\r\n}\r\nexport default UserForm;","import React from 'react';\r\nimport WrappedMap from './components/Map/Map';\r\nimport UserForm from './components/Form/Form'\r\nimport './App.css';\r\n\r\nconst App = () =>{\r\n  const APIkey =\"AIzaSyDvqyM5GIDCWmDG3p2cUGdJVhRhMEgMQX0\";\r\n  return(\r\n    <div className=\"App\">\r\n        <div className=\"Map\">\r\n           <WrappedMap \r\n              googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${APIkey}`} \r\n              loadingElement={<div style={{ height: `100%` }} />}\r\n              containerElement={<div style={{ height: `100%` }} />}\r\n              mapElement={<div style={{ height: `100%` }} />}/>\r\n        </div>\r\n        <div className=\"Form\">\r\n          <h2>USERS</h2>\r\n          <UserForm/>\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {UserContextProvider} from './store/user-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserContextProvider>\n    <App />\n    </UserContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}